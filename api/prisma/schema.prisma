// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Student
  Teacher
  Manager
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  role          Role           @default(Student)
  name          String
  charges       Charge[]
  notifications Notification[]
  disciplines   Discipline[]

  Course   Course? @relation(fields: [courseId], references: [id])
  courseId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  Info
  Warning
  Error
}

enum NotificationStatus {
  Unread
  Read
}

model Notification {
  id      String             @id @default(uuid())
  title   String
  content String
  user    User               @relation(fields: [userId], references: [id])
  userId  String
  type    NotificationType
  status  NotificationStatus @default(Unread)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentMethod {
  PIX
  CreditCard
  DebitCard
  BankSlip
}

model Charge {
  id            String        @id @default(uuid())
  amount        Float
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  paid          Boolean       @default(false)
  paymentMethod PaymentMethod
  expiration    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String       @id @default(uuid())
  name        String
  description String
  credits     Int
  users       User[]
  disciplines Discipline[]

  curriculum   Curriculum @relation(fields: [curriculumId], references: [id])
  curriculumId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DisciplineState {
  Active
  Inactive
  Canceled
}

model Discipline {
  id          String          @id @default(uuid())
  name        String
  price       Float
  semester    Int
  state       DisciplineState @default(Active)
  description String
  credits     Int

  Professor   User   @relation(fields: [professorId], references: [id])
  professorId String

  Course   Course @relation(fields: [courseId], references: [id])
  courseId String

  Curriculum   Curriculum? @relation(fields: [curriculumId], references: [id])
  curriculumId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Curriculum {
  id          String       @id @default(uuid())
  name        String
  description String
  disciplines Discipline[]
  courses     Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
