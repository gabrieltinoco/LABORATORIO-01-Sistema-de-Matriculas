// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Student
  Teacher
  Manager
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  role         Role           @default(Student)
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  courses      Course[]
  Charge       Charge[]
  Discipline   Discipline[]
  Notification Notification[]
}

enum NotificationType {
  Info
  Warning
  Error
}

enum NotificationStatus {
  Unread
  Read
}

model Notification {
  id        String             @id @default(uuid())
  title     String
  content   String
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  status    NotificationStatus @default(Unread)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

enum PaymentMethod {
  PIX
  CreditCard
  DebitCard
  BankSlip
}

model Charge {
  id            String        @id @default(uuid())
  amount        Float
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  paid          Boolean       @default(false)
  paymentMethod PaymentMethod
  expiration    DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Course {
  id           String     @id @default(uuid())
  name         String
  description  String
  credits      Int
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  curriculumId String
  User         User?      @relation(fields: [userId], references: [id])
  userId       String?
}

enum DisciplineState {
  Active
  Inactive
  Canceled
}

model Discipline {
  id           String          @id @default(uuid())
  name         String
  price        Float
  semester     Int
  state        DisciplineState @default(Active)
  description  String
  credits      Int
  professor    User            @relation(fields: [professorId], references: [id])
  professorId  String
  courseId     String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  Curriculum   Curriculum?     @relation(fields: [curriculumId], references: [id])
  curriculumId String?
}

model Curriculum {
  id          String       @id @default(uuid())
  name        String
  description String
  disciplines Discipline[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Course      Course[]
}